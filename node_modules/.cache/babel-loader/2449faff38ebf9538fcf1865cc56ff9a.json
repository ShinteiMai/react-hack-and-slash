{"ast":null,"code":"import { useState, useEffect } from \"react\";\nconst SCROLL_UP = \"up\";\nconst SCROLL_DOWN = \"down\";\n\nconst useScrollDirection = ({\n  initialDirection,\n  thresholdPixels,\n  off\n} = {}) => {\n  const [scrollDir, setScrollDir] = useState(initialDirection);\n  useEffect(() => {\n    const threshold = thresholdPixels || 0;\n    let lastScrollY = window.pageYOffset;\n    let ticking = false;\n\n    const updateScrollDir = () => {\n      const scrollY = window.pageYOffset;\n\n      if (Math.abs(scrollY - lastScrollY) < threshold) {\n        // We haven't exceeded the threshold\n        ticking = false;\n        return;\n      }\n\n      setScrollDir(scrollY > lastScrollY ? SCROLL_DOWN : SCROLL_UP);\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n      ticking = false;\n    };\n\n    const onScroll = () => {\n      if (!ticking) {\n        window.requestAnimationFrame(updateScrollDir);\n        ticking = true;\n      }\n    };\n    /**\n     * Bind the scroll handler if `off` is set to false.\n     * If `off` is set to true reset the scroll direction.\n     */\n\n\n    !off ? window.addEventListener(\"scroll\", onScroll) : setScrollDir(initialDirection);\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [initialDirection, thresholdPixels, off]);\n  return scrollDir;\n};\n\nexport default useScrollDirection;","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-hack-n-slash/src/hooks/useScrollDirection.ts"],"names":["useState","useEffect","SCROLL_UP","SCROLL_DOWN","useScrollDirection","initialDirection","thresholdPixels","off","scrollDir","setScrollDir","threshold","lastScrollY","window","pageYOffset","ticking","updateScrollDir","scrollY","Math","abs","onScroll","requestAnimationFrame","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,MAAMC,SAAS,GAAG,IAAlB;AACA,MAAMC,WAAW,GAAG,MAApB;;AAUA,MAAMC,kBAAkB,GAAG,CAAC;AAC1BC,EAAAA,gBAD0B;AAE1BC,EAAAA,eAF0B;AAG1BC,EAAAA;AAH0B,IAIjB,EAJgB,KAIT;AAChB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAACK,gBAAD,CAA1C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,SAAS,GAAGJ,eAAe,IAAI,CAArC;AACA,QAAIK,WAAW,GAAGC,MAAM,CAACC,WAAzB;AACA,QAAIC,OAAO,GAAG,KAAd;;AAEA,UAAMC,eAAe,GAAG,MAAM;AAC5B,YAAMC,OAAO,GAAGJ,MAAM,CAACC,WAAvB;;AAEA,UAAII,IAAI,CAACC,GAAL,CAASF,OAAO,GAAGL,WAAnB,IAAkCD,SAAtC,EAAiD;AAC/C;AACAI,QAAAA,OAAO,GAAG,KAAV;AACA;AACD;;AAEDL,MAAAA,YAAY,CAACO,OAAO,GAAGL,WAAV,GAAwBR,WAAxB,GAAsCD,SAAvC,CAAZ;AACAS,MAAAA,WAAW,GAAGK,OAAO,GAAG,CAAV,GAAcA,OAAd,GAAwB,CAAtC;AACAF,MAAAA,OAAO,GAAG,KAAV;AACD,KAZD;;AAcA,UAAMK,QAAQ,GAAG,MAAM;AACrB,UAAI,CAACL,OAAL,EAAc;AACZF,QAAAA,MAAM,CAACQ,qBAAP,CAA6BL,eAA7B;AACAD,QAAAA,OAAO,GAAG,IAAV;AACD;AACF,KALD;AAOA;;;;;;AAIA,KAACP,GAAD,GACIK,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCF,QAAlC,CADJ,GAEIV,YAAY,CAACJ,gBAAD,CAFhB;AAIA,WAAO,MAAMO,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCH,QAArC,CAAb;AACD,GAnCQ,EAmCN,CAACd,gBAAD,EAAmBC,eAAnB,EAAoCC,GAApC,CAnCM,CAAT;AAqCA,SAAOC,SAAP;AACD,CA7CD;;AA+CA,eAAeJ,kBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst SCROLL_UP = \"up\";\nconst SCROLL_DOWN = \"down\";\n\ntype Directions = \"up\" | \"down\";\n\ntype Props = {\n  initialDirection?: Directions;\n  thresholdPixels?: number;\n  off?: boolean;\n};\n\nconst useScrollDirection = ({\n  initialDirection,\n  thresholdPixels,\n  off,\n}: Props = {}) => {\n  const [scrollDir, setScrollDir] = useState(initialDirection);\n\n  useEffect(() => {\n    const threshold = thresholdPixels || 0;\n    let lastScrollY = window.pageYOffset;\n    let ticking = false;\n\n    const updateScrollDir = () => {\n      const scrollY = window.pageYOffset;\n\n      if (Math.abs(scrollY - lastScrollY) < threshold) {\n        // We haven't exceeded the threshold\n        ticking = false;\n        return;\n      }\n\n      setScrollDir(scrollY > lastScrollY ? SCROLL_DOWN : SCROLL_UP);\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n      ticking = false;\n    };\n\n    const onScroll = () => {\n      if (!ticking) {\n        window.requestAnimationFrame(updateScrollDir);\n        ticking = true;\n      }\n    };\n\n    /**\n     * Bind the scroll handler if `off` is set to false.\n     * If `off` is set to true reset the scroll direction.\n     */\n    !off\n      ? window.addEventListener(\"scroll\", onScroll)\n      : setScrollDir(initialDirection);\n\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [initialDirection, thresholdPixels, off]);\n\n  return scrollDir;\n};\n\nexport default useScrollDirection;\n"]},"metadata":{},"sourceType":"module"}