{"ast":null,"code":"import { useEffect, useState, useCallback } from \"react\";\nexport const useResize = myRef => {\n  const getDimensions = useCallback(() => myRef.current ? {\n    width: myRef.current.offsetWidth,\n    height: myRef.current.offsetHeight,\n    top: myRef.current.offsetTop,\n    left: myRef.current.offsetLeft\n  } : {\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0\n  }, [myRef]);\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0,\n    left: 0,\n    top: 0\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions());\n    };\n\n    if (myRef.current) {\n      setDimensions(getDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [myRef, getDimensions]);\n  return dimensions;\n};","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-hack-n-slash/src/hooks/useResize.ts"],"names":["useEffect","useState","useCallback","useResize","myRef","getDimensions","current","width","offsetWidth","height","offsetHeight","top","offsetTop","left","offsetLeft","dimensions","setDimensions","handleResize","window","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAAgDC,WAAhD,QAAmE,OAAnE;AAEA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAiD;AACxE,QAAMC,aAAa,GAAGH,WAAW,CAC/B,MACEE,KAAK,CAACE,OAAN,GACI;AACEC,IAAAA,KAAK,EAAEH,KAAK,CAACE,OAAN,CAAcE,WADvB;AAEEC,IAAAA,MAAM,EAAEL,KAAK,CAACE,OAAN,CAAcI,YAFxB;AAGEC,IAAAA,GAAG,EAAEP,KAAK,CAACE,OAAN,CAAcM,SAHrB;AAIEC,IAAAA,IAAI,EAAET,KAAK,CAACE,OAAN,CAAcQ;AAJtB,GADJ,GAOI;AACEP,IAAAA,KAAK,EAAE,CADT;AAEEE,IAAAA,MAAM,EAAE,CAFV;AAGEE,IAAAA,GAAG,EAAE,CAHP;AAIEE,IAAAA,IAAI,EAAE;AAJR,GATyB,EAe/B,CAACT,KAAD,CAf+B,CAAjC;AAkBA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC;AAC3CM,IAAAA,KAAK,EAAE,CADoC;AAE3CE,IAAAA,MAAM,EAAE,CAFmC;AAG3CI,IAAAA,IAAI,EAAE,CAHqC;AAI3CF,IAAAA,GAAG,EAAE;AAJsC,GAAD,CAA5C;AAOAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,YAAY,GAAG,MAAM;AACzBD,MAAAA,aAAa,CAACX,aAAa,EAAd,CAAb;AACD,KAFD;;AAIA,QAAID,KAAK,CAACE,OAAV,EAAmB;AACjBU,MAAAA,aAAa,CAACX,aAAa,EAAd,CAAb;AACD;;AAEDa,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AAEA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC;AACD,KAFD;AAGD,GAdQ,EAcN,CAACb,KAAD,EAAQC,aAAR,CAdM,CAAT;AAgBA,SAAOU,UAAP;AACD,CA3CM","sourcesContent":["import { useEffect, useState, MutableRefObject, useCallback } from \"react\";\n\nexport const useResize = (myRef: MutableRefObject<HTMLElement | null>) => {\n  const getDimensions = useCallback(\n    () =>\n      myRef.current\n        ? {\n            width: myRef.current.offsetWidth,\n            height: myRef.current.offsetHeight,\n            top: myRef.current.offsetTop,\n            left: myRef.current.offsetLeft,\n          }\n        : {\n            width: 0,\n            height: 0,\n            top: 0,\n            left: 0,\n          },\n    [myRef]\n  );\n\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0,\n    left: 0,\n    top: 0,\n  });\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions());\n    };\n\n    if (myRef.current) {\n      setDimensions(getDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [myRef, getDimensions]);\n\n  return dimensions;\n};\n"]},"metadata":{},"sourceType":"module"}