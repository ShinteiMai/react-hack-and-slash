{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport fromApi from \"../api/fromApi\";\nimport { SliceStatus } from \"../globals\";\nimport { camelcaseObject } from \"../utils/camelcaseObject\";\nimport { statusHandlerReducer, wrapReduxAsyncHandler } from \"./utilities\";\nconst initialState = {\n  data: [],\n  status: {\n    state: SliceStatus.IDLE\n  }\n};\nconst speciesSlice = createSlice({\n  name: \"species\",\n  initialState,\n  reducers: { ...statusHandlerReducer,\n\n    getSpeciesReducer(state, action) {\n      const {\n        species\n      } = action.payload;\n      const isSpeciesAlreadyExists = state.data.find(existingSpecies => existingSpecies.id === species.id);\n\n      if (!isSpeciesAlreadyExists) {\n        state.data.push(species);\n      }\n    }\n\n  }\n});\nexport const speciesReducer = speciesSlice.reducer;\nexport const {\n  initialize,\n  error,\n  success,\n  getSpeciesReducer\n} = speciesSlice.actions;\nexport const speciesSelector = state => state.species;\nconst statusHandler = {\n  initialize,\n  error,\n  success\n};\nexport const getSpeciesByName = wrapReduxAsyncHandler(statusHandler, async (dispatch, {\n  pokemonName\n}) => {\n  const pokemonSpecies = await fromApi.getSpeciesByName(pokemonName);\n  dispatch(getSpeciesReducer({\n    species: camelcaseObject(pokemonSpecies)\n  }));\n});\nexport const getSpeciesById = wrapReduxAsyncHandler(statusHandler, async (dispatch, {\n  pokemonId\n}) => {\n  const pokemonSpecies = await fromApi.getSpeciesById(pokemonId);\n  dispatch(getSpeciesReducer({\n    species: camelcaseObject(pokemonSpecies)\n  }));\n});","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/features/speciesSlice.ts"],"names":["createSlice","fromApi","SliceStatus","camelcaseObject","statusHandlerReducer","wrapReduxAsyncHandler","initialState","data","status","state","IDLE","speciesSlice","name","reducers","getSpeciesReducer","action","species","payload","isSpeciesAlreadyExists","find","existingSpecies","id","push","speciesReducer","reducer","initialize","error","success","actions","speciesSelector","statusHandler","getSpeciesByName","dispatch","pokemonName","pokemonSpecies","getSpeciesById","pokemonId"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAGA,SAASC,oBAAT,EAA+BC,qBAA/B,QAA4D,aAA5D;AAiEA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,IAAI,EAAE,EADyB;AAE/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAEP,WAAW,CAACQ;AADb;AAFuB,CAAjC;AAOA,MAAMC,YAAY,GAAGX,WAAW,CAAC;AAC/BY,EAAAA,IAAI,EAAE,SADyB;AAE/BN,EAAAA,YAF+B;AAG/BO,EAAAA,QAAQ,EAAE,EACR,GAAGT,oBADK;;AAERU,IAAAA,iBAAiB,CAACL,KAAD,EAAQM,MAAR,EAAqD;AACpE,YAAM;AAAEC,QAAAA;AAAF,UAAcD,MAAM,CAACE,OAA3B;AACA,YAAMC,sBAAsB,GAAGT,KAAK,CAACF,IAAN,CAAWY,IAAX,CAC5BC,eAAD,IAAqBA,eAAe,CAACC,EAAhB,KAAuBL,OAAO,CAACK,EADvB,CAA/B;;AAGA,UAAI,CAACH,sBAAL,EAA6B;AAC3BT,QAAAA,KAAK,CAACF,IAAN,CAAWe,IAAX,CAAgBN,OAAhB;AACD;AACF;;AAVO;AAHqB,CAAD,CAAhC;AAiBA,OAAO,MAAMO,cAAc,GAAGZ,YAAY,CAACa,OAApC;AACP,OAAO,MAAM;AACXC,EAAAA,UADW;AAEXC,EAAAA,KAFW;AAGXC,EAAAA,OAHW;AAIXb,EAAAA;AAJW,IAKTH,YAAY,CAACiB,OALV;AAOP,OAAO,MAAMC,eAAe,GAAIpB,KAAD,IAAsBA,KAAK,CAACO,OAApD;AAEP,MAAMc,aAAa,GAAG;AAAEL,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAAtB;AACA,OAAO,MAAMI,gBAAgB,GAAG1B,qBAAqB,CACnDyB,aADmD,EAEnD,OAAOE,QAAP,EAAiB;AAAEC,EAAAA;AAAF,CAAjB,KAAqC;AACnC,QAAMC,cAAc,GAAG,MAAMjC,OAAO,CAAC8B,gBAAR,CAAyBE,WAAzB,CAA7B;AACAD,EAAAA,QAAQ,CAAClB,iBAAiB,CAAC;AAAEE,IAAAA,OAAO,EAAEb,eAAe,CAAC+B,cAAD;AAA1B,GAAD,CAAlB,CAAR;AACD,CALkD,CAA9C;AAQP,OAAO,MAAMC,cAAc,GAAG9B,qBAAqB,CACjDyB,aADiD,EAEjD,OAAOE,QAAP,EAAiB;AAAEI,EAAAA;AAAF,CAAjB,KAAmC;AACjC,QAAMF,cAAc,GAAG,MAAMjC,OAAO,CAACkC,cAAR,CAAuBC,SAAvB,CAA7B;AAEAJ,EAAAA,QAAQ,CAAClB,iBAAiB,CAAC;AAAEE,IAAAA,OAAO,EAAEb,eAAe,CAAC+B,cAAD;AAA1B,GAAD,CAAlB,CAAR;AACD,CANgD,CAA5C","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport fromApi from \"../api/fromApi\";\nimport { SliceStatus } from \"../globals\";\nimport { camelcaseObject } from \"../utils/camelcaseObject\";\nimport { RootState } from \"./store\";\nimport { APIResource, NamedAPIResource } from \"./types\";\nimport { statusHandlerReducer, wrapReduxAsyncHandler } from \"./utilities\";\n\nexport type Species = {\n  id: number;\n  name: string;\n  order: number;\n  genderRate: number;\n  captureRate: number;\n  baseHappiness: number;\n  isBaby: boolean;\n  isLegendary: boolean;\n  isMythical: boolean;\n  hatchCounter: number;\n  hasGenderDifferences: boolean;\n  formsSwitchable: boolean;\n  growthRate: NamedAPIResource;\n  pokedexNumbers: {\n    entryNumber: number;\n    pokedex: NamedAPIResource;\n  }[];\n  eggGroups: NamedAPIResource[];\n  color: NamedAPIResource;\n  shape: NamedAPIResource;\n  evolvesFromSpecies: NamedAPIResource;\n  evolutionChain: APIResource;\n  habitat: NamedAPIResource;\n  generation: NamedAPIResource;\n  names: {\n    name: string;\n    language: NamedAPIResource;\n  }[];\n  palParkEncounters: {\n    baseScore: number;\n    rate: number;\n    area: {\n      name: string;\n      url: string;\n    };\n  }[];\n  flavorTextEntries: {\n    flavorText: string;\n    language: NamedAPIResource;\n    version: NamedAPIResource;\n  }[];\n  formDescriptions: {\n    description: string;\n    language: NamedAPIResource;\n  }[];\n  genera: {\n    genus: string;\n    language: NamedAPIResource;\n  }[];\n  varieties: {\n    isDefault: boolean;\n    pokemon: NamedAPIResource;\n  }[];\n};\n\ntype SliceState = {\n  data: Species[];\n  status: {\n    state: SliceStatus;\n  };\n};\n\nconst initialState: SliceState = {\n  data: [],\n  status: {\n    state: SliceStatus.IDLE,\n  },\n};\n\nconst speciesSlice = createSlice({\n  name: \"species\",\n  initialState,\n  reducers: {\n    ...statusHandlerReducer,\n    getSpeciesReducer(state, action: PayloadAction<{ species: Species }>) {\n      const { species } = action.payload;\n      const isSpeciesAlreadyExists = state.data.find(\n        (existingSpecies) => existingSpecies.id === species.id\n      );\n      if (!isSpeciesAlreadyExists) {\n        state.data.push(species);\n      }\n    },\n  },\n});\n\nexport const speciesReducer = speciesSlice.reducer;\nexport const {\n  initialize,\n  error,\n  success,\n  getSpeciesReducer,\n} = speciesSlice.actions;\n\nexport const speciesSelector = (state: RootState) => state.species;\n\nconst statusHandler = { initialize, error, success };\nexport const getSpeciesByName = wrapReduxAsyncHandler(\n  statusHandler,\n  async (dispatch, { pokemonName }) => {\n    const pokemonSpecies = await fromApi.getSpeciesByName(pokemonName);\n    dispatch(getSpeciesReducer({ species: camelcaseObject(pokemonSpecies) }));\n  }\n);\n\nexport const getSpeciesById = wrapReduxAsyncHandler(\n  statusHandler,\n  async (dispatch, { pokemonId }) => {\n    const pokemonSpecies = await fromApi.getSpeciesById(pokemonId);\n\n    dispatch(getSpeciesReducer({ species: camelcaseObject(pokemonSpecies) }));\n  }\n);\n"]},"metadata":{},"sourceType":"module"}