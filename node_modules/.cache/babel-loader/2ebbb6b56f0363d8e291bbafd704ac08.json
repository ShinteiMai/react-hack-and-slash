{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport fromApi from \"../api/fromApi\";\nimport { SliceStatus } from \"../globals\";\nimport { statusHandlerReducer, wrapReduxAsyncHandler } from \"./utilities\";\nimport Levenshtein from \"fast-levenshtein\";\nimport { shuffle } from \"../utils/shuffle\";\nimport { camelcaseObject } from \"../utils/camelcaseObject\";\nexport let PokemonGenerationsEnum;\n\n(function (PokemonGenerationsEnum) {\n  PokemonGenerationsEnum[\"GENERATION_1\"] = \"151\";\n  PokemonGenerationsEnum[\"GENERATION_2\"] = \"251\";\n  PokemonGenerationsEnum[\"GENERATION_3\"] = \"386\";\n  PokemonGenerationsEnum[\"GENERATION_4\"] = \"494\";\n  PokemonGenerationsEnum[\"GENERATION_5\"] = \"649\";\n  PokemonGenerationsEnum[\"GENERATION_6\"] = \"721\";\n  PokemonGenerationsEnum[\"GENERATION_7\"] = \"809\";\n})(PokemonGenerationsEnum || (PokemonGenerationsEnum = {}));\n\nconst initialState = {\n  cache: [],\n  data: [],\n  status: {\n    state: SliceStatus.IDLE\n  }\n};\nconst cachedPokemonsSlice = createSlice({\n  name: \"cachedPokemons\",\n  initialState,\n  reducers: { ...statusHandlerReducer,\n\n    getCachedPokemonsReducer(state, action) {\n      const {\n        cachedPokemons\n      } = action.payload;\n      console.log(cachedPokemons);\n      state.cache = cachedPokemons;\n      state.data = shuffle([...cachedPokemons]);\n    },\n\n    searchPokemonsByNameReducer(state, action) {\n      const {\n        pokemonName\n      } = action.payload;\n      state.data = state.cache.map(pokemon => {\n        return { ...pokemon,\n          distance: Levenshtein.get(pokemon.name, pokemonName)\n        };\n      }).sort((a, b) => a.distance - b.distance);\n    },\n\n    filterPokemonsByGenerationReducer(state, action) {\n      const {\n        selectedGeneration\n      } = action.payload;\n      let cache = state.cache;\n\n      if (selectedGeneration) {\n        const generations = Object.entries(PokemonGenerationsEnum);\n        let startingIndex = 0;\n        generations.forEach(([_, b], index) => {\n          if (b === selectedGeneration) {\n            startingIndex = index === 0 ? 0 : Number(generations[index - 1][1]);\n          }\n        });\n        cache = state.cache.slice(startingIndex, Number(selectedGeneration));\n      }\n\n      state.data = cache;\n    },\n\n    randomizePokemonsReducer(state, action) {\n      state.data = shuffle([...state.cache]);\n    }\n\n  }\n});\nexport const cachedPokemonsReducer = cachedPokemonsSlice.reducer;\nexport const {\n  initialize,\n  error,\n  success,\n  getCachedPokemonsReducer,\n  searchPokemonsByNameReducer,\n  filterPokemonsByGenerationReducer,\n  randomizePokemonsReducer\n} = cachedPokemonsSlice.actions;\nconst statusHandler = {\n  initialize,\n  error,\n  success\n};\nexport const cachedPokemonsSelector = state => state.cachedPokemons;\nexport const getCachedPokemons = wrapReduxAsyncHandler(statusHandler, async dispatch => {\n  const {\n    results\n  } = await fromApi.getPokemons(Number(PokemonGenerationsEnum.GENERATION_7));\n  const transformedPokemons = results.map(res => ({ ...res,\n    distance: 0\n  }));\n  dispatch(getCachedPokemonsReducer({\n    cachedPokemons: camelcaseObject(transformedPokemons)\n  }));\n});","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/features/cachedPokemonsSlice.ts"],"names":["createSlice","fromApi","SliceStatus","statusHandlerReducer","wrapReduxAsyncHandler","Levenshtein","shuffle","camelcaseObject","PokemonGenerationsEnum","initialState","cache","data","status","state","IDLE","cachedPokemonsSlice","name","reducers","getCachedPokemonsReducer","action","cachedPokemons","payload","console","log","searchPokemonsByNameReducer","pokemonName","map","pokemon","distance","get","sort","a","b","filterPokemonsByGenerationReducer","selectedGeneration","generations","Object","entries","startingIndex","forEach","_","index","Number","slice","randomizePokemonsReducer","cachedPokemonsReducer","reducer","initialize","error","success","actions","statusHandler","cachedPokemonsSelector","getCachedPokemons","dispatch","results","getPokemons","GENERATION_7","transformedPokemons","res"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAGA,SAASC,oBAAT,EAA+BC,qBAA/B,QAA4D,aAA5D;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAEA,WAAYC,sBAAZ;;WAAYA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;AAAAA,EAAAA,sB;GAAAA,sB,KAAAA,sB;;AAkBZ,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,KAAK,EAAE,EADwB;AAE/BC,EAAAA,IAAI,EAAE,EAFyB;AAG/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAEX,WAAW,CAACY;AADb;AAHuB,CAAjC;AAQA,MAAMC,mBAAmB,GAAGf,WAAW,CAAC;AACtCgB,EAAAA,IAAI,EAAE,gBADgC;AAEtCP,EAAAA,YAFsC;AAGtCQ,EAAAA,QAAQ,EAAE,EACR,GAAGd,oBADK;;AAERe,IAAAA,wBAAwB,CACtBL,KADsB,EAEtBM,MAFsB,EAKtB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAqBD,MAAM,CAACE,OAAlC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AACAP,MAAAA,KAAK,CAACH,KAAN,GAAcU,cAAd;AACAP,MAAAA,KAAK,CAACF,IAAN,GAAaL,OAAO,CAAC,CAAC,GAAGc,cAAJ,CAAD,CAApB;AACD,KAZO;;AAaRI,IAAAA,2BAA2B,CACzBX,KADyB,EAEzBM,MAFyB,EAKzB;AACA,YAAM;AAAEM,QAAAA;AAAF,UAAkBN,MAAM,CAACE,OAA/B;AAEAR,MAAAA,KAAK,CAACF,IAAN,GAAaE,KAAK,CAACH,KAAN,CACVgB,GADU,CACLC,OAAD,IAAa;AAChB,eAAO,EACL,GAAGA,OADE;AAELC,UAAAA,QAAQ,EAAEvB,WAAW,CAACwB,GAAZ,CAAgBF,OAAO,CAACX,IAAxB,EAA8BS,WAA9B;AAFL,SAAP;AAID,OANU,EAOVK,IAPU,CAOL,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACH,QAAF,GAAaI,CAAC,CAACJ,QAPpB,CAAb;AAQD,KA7BO;;AA8BRK,IAAAA,iCAAiC,CAC/BpB,KAD+B,EAE/BM,MAF+B,EAK/B;AACA,YAAM;AAAEe,QAAAA;AAAF,UAAyBf,MAAM,CAACE,OAAtC;AACA,UAAIX,KAAkD,GAAGG,KAAK,CAACH,KAA/D;;AACA,UAAIwB,kBAAJ,EAAwB;AACtB,cAAMC,WAAW,GAAGC,MAAM,CAACC,OAAP,CAAe7B,sBAAf,CAApB;AACA,YAAI8B,aAAqB,GAAG,CAA5B;AACAH,QAAAA,WAAW,CAACI,OAAZ,CAAoB,CAAC,CAACC,CAAD,EAAIR,CAAJ,CAAD,EAASS,KAAT,KAAmB;AACrC,cAAIT,CAAC,KAAKE,kBAAV,EAA8B;AAC5BI,YAAAA,aAAa,GAAGG,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkBC,MAAM,CAACP,WAAW,CAACM,KAAK,GAAG,CAAT,CAAX,CAAuB,CAAvB,CAAD,CAAxC;AACD;AACF,SAJD;AAKA/B,QAAAA,KAAK,GAAGG,KAAK,CAACH,KAAN,CAAYiC,KAAZ,CAAkBL,aAAlB,EAAiCI,MAAM,CAACR,kBAAD,CAAvC,CAAR;AACD;;AACDrB,MAAAA,KAAK,CAACF,IAAN,GAAaD,KAAb;AACD,KAjDO;;AAkDRkC,IAAAA,wBAAwB,CAAC/B,KAAD,EAAQM,MAAR,EAAgB;AACtCN,MAAAA,KAAK,CAACF,IAAN,GAAaL,OAAO,CAAC,CAAC,GAAGO,KAAK,CAACH,KAAV,CAAD,CAApB;AACD;;AApDO;AAH4B,CAAD,CAAvC;AA2DA,OAAO,MAAMmC,qBAAqB,GAAG9B,mBAAmB,CAAC+B,OAAlD;AACP,OAAO,MAAM;AACXC,EAAAA,UADW;AAEXC,EAAAA,KAFW;AAGXC,EAAAA,OAHW;AAIX/B,EAAAA,wBAJW;AAKXM,EAAAA,2BALW;AAMXS,EAAAA,iCANW;AAOXW,EAAAA;AAPW,IAQT7B,mBAAmB,CAACmC,OARjB;AAUP,MAAMC,aAAa,GAAG;AAAEJ,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAAtB;AAEA,OAAO,MAAMG,sBAAsB,GAAIvC,KAAD,IACpCA,KAAK,CAACO,cADD;AAGP,OAAO,MAAMiC,iBAAiB,GAAGjD,qBAAqB,CACpD+C,aADoD,EAEpD,MAAOG,QAAP,IAAoB;AAClB,QAAM;AACJC,IAAAA;AADI,MAE+B,MAAMtD,OAAO,CAACuD,WAAR,CACzCd,MAAM,CAAClC,sBAAsB,CAACiD,YAAxB,CADmC,CAF3C;AAKA,QAAMC,mBAAmB,GAAGH,OAAO,CAAC7B,GAAR,CAAaiC,GAAD,KAA4B,EAClE,GAAGA,GAD+D;AAElE/B,IAAAA,QAAQ,EAAE;AAFwD,GAA5B,CAAZ,CAA5B;AAIA0B,EAAAA,QAAQ,CACNpC,wBAAwB,CAAC;AACvBE,IAAAA,cAAc,EAAEb,eAAe,CAACmD,mBAAD;AADR,GAAD,CADlB,CAAR;AAKD,CAjBmD,CAA/C","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport fromApi from \"../api/fromApi\";\nimport { SliceStatus } from \"../globals\";\nimport { RootState } from \"./store\";\nimport { NamedAPIResource } from \"./types\";\nimport { statusHandlerReducer, wrapReduxAsyncHandler } from \"./utilities\";\nimport Levenshtein from \"fast-levenshtein\";\nimport { shuffle } from \"../utils/shuffle\";\nimport { camelcaseObject } from \"../utils/camelcaseObject\";\n\nexport enum PokemonGenerationsEnum {\n  GENERATION_1 = \"151\",\n  GENERATION_2 = \"251\",\n  GENERATION_3 = \"386\",\n  GENERATION_4 = \"494\",\n  GENERATION_5 = \"649\",\n  GENERATION_6 = \"721\",\n  GENERATION_7 = \"809\",\n}\n\ntype SliceState = {\n  cache: (NamedAPIResource & { distance: number })[];\n  data: (NamedAPIResource & { distance: number })[];\n  status: {\n    state: SliceStatus;\n  };\n};\n\nconst initialState: SliceState = {\n  cache: [],\n  data: [],\n  status: {\n    state: SliceStatus.IDLE,\n  },\n};\n\nconst cachedPokemonsSlice = createSlice({\n  name: \"cachedPokemons\",\n  initialState,\n  reducers: {\n    ...statusHandlerReducer,\n    getCachedPokemonsReducer(\n      state,\n      action: PayloadAction<{\n        cachedPokemons: (NamedAPIResource & { distance: number })[];\n      }>\n    ) {\n      const { cachedPokemons } = action.payload;\n      console.log(cachedPokemons);\n      state.cache = cachedPokemons;\n      state.data = shuffle([...cachedPokemons]);\n    },\n    searchPokemonsByNameReducer(\n      state,\n      action: PayloadAction<{\n        pokemonName: string;\n      }>\n    ) {\n      const { pokemonName } = action.payload;\n\n      state.data = state.cache\n        .map((pokemon) => {\n          return {\n            ...pokemon,\n            distance: Levenshtein.get(pokemon.name, pokemonName),\n          };\n        })\n        .sort((a, b) => a.distance - b.distance);\n    },\n    filterPokemonsByGenerationReducer(\n      state,\n      action: PayloadAction<{\n        selectedGeneration: PokemonGenerationsEnum | null;\n      }>\n    ) {\n      const { selectedGeneration } = action.payload;\n      let cache: (NamedAPIResource & { distance: number })[] = state.cache;\n      if (selectedGeneration) {\n        const generations = Object.entries(PokemonGenerationsEnum);\n        let startingIndex: number = 0;\n        generations.forEach(([_, b], index) => {\n          if (b === selectedGeneration) {\n            startingIndex = index === 0 ? 0 : Number(generations[index - 1][1]);\n          }\n        });\n        cache = state.cache.slice(startingIndex, Number(selectedGeneration));\n      }\n      state.data = cache;\n    },\n    randomizePokemonsReducer(state, action) {\n      state.data = shuffle([...state.cache]);\n    },\n  },\n});\n\nexport const cachedPokemonsReducer = cachedPokemonsSlice.reducer;\nexport const {\n  initialize,\n  error,\n  success,\n  getCachedPokemonsReducer,\n  searchPokemonsByNameReducer,\n  filterPokemonsByGenerationReducer,\n  randomizePokemonsReducer,\n} = cachedPokemonsSlice.actions;\n\nconst statusHandler = { initialize, error, success };\n\nexport const cachedPokemonsSelector = (state: RootState) =>\n  state.cachedPokemons;\n\nexport const getCachedPokemons = wrapReduxAsyncHandler(\n  statusHandler,\n  async (dispatch) => {\n    const {\n      results,\n    }: { results: NamedAPIResource[] } = await fromApi.getPokemons(\n      Number(PokemonGenerationsEnum.GENERATION_7)\n    );\n    const transformedPokemons = results.map((res: NamedAPIResource) => ({\n      ...res,\n      distance: 0,\n    }));\n    dispatch(\n      getCachedPokemonsReducer({\n        cachedPokemons: camelcaseObject(transformedPokemons),\n      })\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}