{"ast":null,"code":"import _regeneratorRuntime from\"/home/shinteimai/workspace/personal/react-pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/shinteimai/workspace/personal/react-pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/home/shinteimai/workspace/personal/react-pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createSlice}from\"@reduxjs/toolkit\";import fromApi from\"../api/fromApi\";import{SliceStatus}from\"../globals\";import{camelcaseObject}from\"../utils/camelcaseObject\";import{statusHandlerReducer,wrapReduxAsyncHandler}from\"./utilities\";var initialState={data:[],status:{state:SliceStatus.IDLE}};var speciesSlice=createSlice({name:\"species\",initialState:initialState,reducers:_objectSpread({},statusHandlerReducer,{getSpeciesReducer:function getSpeciesReducer(state,action){var species=action.payload.species;var isSpeciesAlreadyExists=state.data.find(function(existingSpecies){return existingSpecies.id===species.id;});if(!isSpeciesAlreadyExists){state.data.push(species);}}})});export var speciesReducer=speciesSlice.reducer;var _speciesSlice$actions=speciesSlice.actions,initialize=_speciesSlice$actions.initialize,error=_speciesSlice$actions.error,success=_speciesSlice$actions.success,getSpeciesReducer=_speciesSlice$actions.getSpeciesReducer;export{initialize,error,success,getSpeciesReducer};export var speciesSelector=function speciesSelector(state){return state.species;};var statusHandler={initialize:initialize,error:error,success:success};export var getSpeciesByName=wrapReduxAsyncHandler(statusHandler,/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,_ref){var pokemonName,pokemonSpecies;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:pokemonName=_ref.pokemonName;_context.next=3;return fromApi.getSpeciesByName(pokemonName);case 3:pokemonSpecies=_context.sent;dispatch(getSpeciesReducer({species:camelcaseObject(pokemonSpecies)}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref2.apply(this,arguments);};}());export var getSpeciesById=wrapReduxAsyncHandler(statusHandler,/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,_ref3){var pokemonId,pokemonSpecies;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:pokemonId=_ref3.pokemonId;_context2.next=3;return fromApi.getSpeciesById(pokemonId);case 3:pokemonSpecies=_context2.sent;dispatch(getSpeciesReducer({species:camelcaseObject(pokemonSpecies)}));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3,_x4){return _ref4.apply(this,arguments);};}());","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/features/speciesSlice.ts"],"names":["createSlice","fromApi","SliceStatus","camelcaseObject","statusHandlerReducer","wrapReduxAsyncHandler","initialState","data","status","state","IDLE","speciesSlice","name","reducers","getSpeciesReducer","action","species","payload","isSpeciesAlreadyExists","find","existingSpecies","id","push","speciesReducer","reducer","actions","initialize","error","success","speciesSelector","statusHandler","getSpeciesByName","dispatch","pokemonName","pokemonSpecies","getSpeciesById","pokemonId"],"mappings":"ofAAA,OAASA,WAAT,KAA2C,kBAA3C,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,WAAT,KAA4B,YAA5B,CACA,OAASC,eAAT,KAAgC,0BAAhC,CAGA,OAASC,oBAAT,CAA+BC,qBAA/B,KAA4D,aAA5D,CAiEA,GAAMC,CAAAA,YAAwB,CAAG,CAC/BC,IAAI,CAAE,EADyB,CAE/BC,MAAM,CAAE,CACNC,KAAK,CAAEP,WAAW,CAACQ,IADb,CAFuB,CAAjC,CAOA,GAAMC,CAAAA,YAAY,CAAGX,WAAW,CAAC,CAC/BY,IAAI,CAAE,SADyB,CAE/BN,YAAY,CAAZA,YAF+B,CAG/BO,QAAQ,kBACHT,oBADG,EAENU,iBAFM,4BAEYL,KAFZ,CAEmBM,MAFnB,CAEgE,IAC5DC,CAAAA,OAD4D,CAChDD,MAAM,CAACE,OADyC,CAC5DD,OAD4D,CAEpE,GAAME,CAAAA,sBAAsB,CAAGT,KAAK,CAACF,IAAN,CAAWY,IAAX,CAC7B,SAACC,eAAD,QAAqBA,CAAAA,eAAe,CAACC,EAAhB,GAAuBL,OAAO,CAACK,EAApD,EAD6B,CAA/B,CAGA,GAAI,CAACH,sBAAL,CAA6B,CAC3BT,KAAK,CAACF,IAAN,CAAWe,IAAX,CAAgBN,OAAhB,EACD,CACF,CAVK,EAHuB,CAAD,CAAhC,CAiBA,MAAO,IAAMO,CAAAA,cAAc,CAAGZ,YAAY,CAACa,OAApC,C,0BAMHb,YAAY,CAACc,O,CAJfC,U,uBAAAA,U,CACAC,K,uBAAAA,K,CACAC,O,uBAAAA,O,CACAd,iB,uBAAAA,iB,oDAGF,MAAO,IAAMe,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACpB,KAAD,QAAsBA,CAAAA,KAAK,CAACO,OAA5B,EAAxB,CAEP,GAAMc,CAAAA,aAAa,CAAG,CAAEJ,UAAU,CAAVA,UAAF,CAAcC,KAAK,CAALA,KAAd,CAAqBC,OAAO,CAAPA,OAArB,CAAtB,CACA,MAAO,IAAMG,CAAAA,gBAAgB,CAAG1B,qBAAqB,CACnDyB,aADmD,2FAEnD,iBAAOE,QAAP,sJAAmBC,WAAnB,MAAmBA,WAAnB,uBAC+BhC,CAAAA,OAAO,CAAC8B,gBAAR,CAAyBE,WAAzB,CAD/B,QACQC,cADR,eAEEF,QAAQ,CAAClB,iBAAiB,CAAC,CAAEE,OAAO,CAAEb,eAAe,CAAC+B,cAAD,CAA1B,CAAD,CAAlB,CAAR,CAFF,sDAFmD,oEAA9C,CAQP,MAAO,IAAMC,CAAAA,cAAc,CAAG9B,qBAAqB,CACjDyB,aADiD,2FAEjD,kBAAOE,QAAP,yJAAmBI,SAAnB,OAAmBA,SAAnB,wBAC+BnC,CAAAA,OAAO,CAACkC,cAAR,CAAuBC,SAAvB,CAD/B,QACQF,cADR,gBAGEF,QAAQ,CAAClB,iBAAiB,CAAC,CAAEE,OAAO,CAAEb,eAAe,CAAC+B,cAAD,CAA1B,CAAD,CAAlB,CAAR,CAHF,wDAFiD,qEAA5C","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport fromApi from \"../api/fromApi\";\nimport { SliceStatus } from \"../globals\";\nimport { camelcaseObject } from \"../utils/camelcaseObject\";\nimport { RootState } from \"./store\";\nimport { APIResource, NamedAPIResource } from \"./types\";\nimport { statusHandlerReducer, wrapReduxAsyncHandler } from \"./utilities\";\n\nexport type Species = {\n  id: number;\n  name: string;\n  order: number;\n  genderRate: number;\n  captureRate: number;\n  baseHappiness: number;\n  isBaby: boolean;\n  isLegendary: boolean;\n  isMythical: boolean;\n  hatchCounter: number;\n  hasGenderDifferences: boolean;\n  formsSwitchable: boolean;\n  growthRate: NamedAPIResource;\n  pokedexNumbers: {\n    entryNumber: number;\n    pokedex: NamedAPIResource;\n  }[];\n  eggGroups: NamedAPIResource[];\n  color: NamedAPIResource;\n  shape: NamedAPIResource;\n  evolvesFromSpecies: NamedAPIResource;\n  evolutionChain: APIResource;\n  habitat: NamedAPIResource;\n  generation: NamedAPIResource;\n  names: {\n    name: string;\n    language: NamedAPIResource;\n  }[];\n  palParkEncounters: {\n    baseScore: number;\n    rate: number;\n    area: {\n      name: string;\n      url: string;\n    };\n  }[];\n  flavorTextEntries: {\n    flavorText: string;\n    language: NamedAPIResource;\n    version: NamedAPIResource;\n  }[];\n  formDescriptions: {\n    description: string;\n    language: NamedAPIResource;\n  }[];\n  genera: {\n    genus: string;\n    language: NamedAPIResource;\n  }[];\n  varieties: {\n    isDefault: boolean;\n    pokemon: NamedAPIResource;\n  }[];\n};\n\ntype SliceState = {\n  data: Species[];\n  status: {\n    state: SliceStatus;\n  };\n};\n\nconst initialState: SliceState = {\n  data: [],\n  status: {\n    state: SliceStatus.IDLE,\n  },\n};\n\nconst speciesSlice = createSlice({\n  name: \"species\",\n  initialState,\n  reducers: {\n    ...statusHandlerReducer,\n    getSpeciesReducer(state, action: PayloadAction<{ species: Species }>) {\n      const { species } = action.payload;\n      const isSpeciesAlreadyExists = state.data.find(\n        (existingSpecies) => existingSpecies.id === species.id\n      );\n      if (!isSpeciesAlreadyExists) {\n        state.data.push(species);\n      }\n    },\n  },\n});\n\nexport const speciesReducer = speciesSlice.reducer;\nexport const {\n  initialize,\n  error,\n  success,\n  getSpeciesReducer,\n} = speciesSlice.actions;\n\nexport const speciesSelector = (state: RootState) => state.species;\n\nconst statusHandler = { initialize, error, success };\nexport const getSpeciesByName = wrapReduxAsyncHandler(\n  statusHandler,\n  async (dispatch, { pokemonName }) => {\n    const pokemonSpecies = await fromApi.getSpeciesByName(pokemonName);\n    dispatch(getSpeciesReducer({ species: camelcaseObject(pokemonSpecies) }));\n  }\n);\n\nexport const getSpeciesById = wrapReduxAsyncHandler(\n  statusHandler,\n  async (dispatch, { pokemonId }) => {\n    const pokemonSpecies = await fromApi.getSpeciesById(pokemonId);\n\n    dispatch(getSpeciesReducer({ species: camelcaseObject(pokemonSpecies) }));\n  }\n);\n"]},"metadata":{},"sourceType":"module"}