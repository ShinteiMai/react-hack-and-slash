{"ast":null,"code":"var numeralCodes=[[\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"],// Ones\n[\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"],// Tens\n[\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"]// Hundreds\n];export var romanize=function romanize(num){var numeral=\"\";var digits=num.toString().split(\"\").reverse();for(var i=0;i<digits.length;i++){numeral=numeralCodes[i][parseInt(digits[i])]+numeral;}return numeral;};","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/utils/romanize.ts"],"names":["numeralCodes","romanize","num","numeral","digits","toString","split","reverse","i","length","parseInt"],"mappings":"AAAA,GAAMA,CAAAA,YAAY,CAAG,CACnB,CAAC,EAAD,CAAK,GAAL,CAAU,IAAV,CAAgB,KAAhB,CAAuB,IAAvB,CAA6B,GAA7B,CAAkC,IAAlC,CAAwC,KAAxC,CAA+C,MAA/C,CAAuD,IAAvD,CADmB,CAC2C;AAC9D,CAAC,EAAD,CAAK,GAAL,CAAU,IAAV,CAAgB,KAAhB,CAAuB,IAAvB,CAA6B,GAA7B,CAAkC,IAAlC,CAAwC,KAAxC,CAA+C,MAA/C,CAAuD,IAAvD,CAFmB,CAE2C;AAC9D,CAAC,EAAD,CAAK,GAAL,CAAU,IAAV,CAAgB,KAAhB,CAAuB,IAAvB,CAA6B,GAA7B,CAAkC,IAAlC,CAAwC,KAAxC,CAA+C,MAA/C,CAAuD,IAAvD,CAA8D;AAH3C,CAArB,CAMA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,CAAiB,CACvC,GAAIC,CAAAA,OAAO,CAAG,EAAd,CACA,GAAMC,CAAAA,MAAM,CAAGF,GAAG,CAACG,QAAJ,GAAeC,KAAf,CAAqB,EAArB,EAAyBC,OAAzB,EAAf,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,MAAM,CAACK,MAA3B,CAAmCD,CAAC,EAApC,CAAwC,CACtCL,OAAO,CAAGH,YAAY,CAACQ,CAAD,CAAZ,CAAgBE,QAAQ,CAACN,MAAM,CAACI,CAAD,CAAP,CAAxB,EAAuCL,OAAjD,CACD,CACD,MAAOA,CAAAA,OAAP,CACD,CAPM","sourcesContent":["const numeralCodes = [\n  [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"], // Ones\n  [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"], // Tens\n  [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"], // Hundreds\n];\n\nexport const romanize = (num: number) => {\n  let numeral = \"\";\n  const digits = num.toString().split(\"\").reverse();\n  for (var i = 0; i < digits.length; i++) {\n    numeral = numeralCodes[i][parseInt(digits[i])] + numeral;\n  }\n  return numeral;\n};\n"]},"metadata":{},"sourceType":"module"}