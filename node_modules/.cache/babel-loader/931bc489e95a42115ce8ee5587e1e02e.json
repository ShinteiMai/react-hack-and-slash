{"ast":null,"code":"import { SliceStatus } from \"../globals\";\nexport const statusHandlerReducer = {\n  initialize: (state, action) => {\n    state.status.state = SliceStatus.LOADING;\n  },\n  error: (state, action) => {\n    state.status.state = SliceStatus.ERROR;\n  },\n  success: (state, action) => {\n    state.status.state = SliceStatus.SUCCESS;\n  }\n};\nexport const wrapReduxAsyncHandler = (statusHandler, callback) => args => async dispatch => {\n  dispatch(statusHandler.initialize({}));\n  callback(dispatch, args).then(() => {\n    dispatch(statusHandler.success({}));\n  }).catch(err => {\n    console.error(err);\n  });\n};","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/features/utilities.ts"],"names":["SliceStatus","statusHandlerReducer","initialize","state","action","status","LOADING","error","ERROR","success","SUCCESS","wrapReduxAsyncHandler","statusHandler","callback","args","dispatch","then","catch","err","console"],"mappings":"AAEA,SAASA,WAAT,QAA4B,YAA5B;AAEA,OAAO,MAAMC,oBAAoB,GAAG;AAClCC,EAAAA,UAAU,EAAE,CAACC,KAAD,EAAaC,MAAb,KAAuC;AACjDD,IAAAA,KAAK,CAACE,MAAN,CAAaF,KAAb,GAAqBH,WAAW,CAACM,OAAjC;AACD,GAHiC;AAIlCC,EAAAA,KAAK,EAAE,CAACJ,KAAD,EAAaC,MAAb,KAAuC;AAC5CD,IAAAA,KAAK,CAACE,MAAN,CAAaF,KAAb,GAAqBH,WAAW,CAACQ,KAAjC;AACD,GANiC;AAOlCC,EAAAA,OAAO,EAAE,CAACN,KAAD,EAAaC,MAAb,KAAuC;AAC9CD,IAAAA,KAAK,CAACE,MAAN,CAAaF,KAAb,GAAqBH,WAAW,CAACU,OAAjC;AACD;AATiC,CAA7B;AAsBP,OAAO,MAAMC,qBAAqB,GAAG,CACnCC,aADmC,EAEnCC,QAFmC,KAG/BC,IAAD,IAAgB,MAAOC,QAAP,IAAmC;AACtDA,EAAAA,QAAQ,CAACH,aAAa,CAACV,UAAd,CAAyB,EAAzB,CAAD,CAAR;AAEAW,EAAAA,QAAQ,CAACE,QAAD,EAAWD,IAAX,CAAR,CACGE,IADH,CACQ,MAAM;AACVD,IAAAA,QAAQ,CAACH,aAAa,CAACH,OAAd,CAAsB,EAAtB,CAAD,CAAR;AACD,GAHH,EAIGQ,KAJH,CAIUC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACZ,KAAR,CAAcW,GAAd;AACD,GANH;AAOD,CAbM","sourcesContent":["import { Dispatch } from \"react\";\nimport { ActionCreatorWithPayload, PayloadAction } from \"@reduxjs/toolkit\";\nimport { SliceStatus } from \"../globals\";\n\nexport const statusHandlerReducer = {\n  initialize: (state: any, action: PayloadAction) => {\n    state.status.state = SliceStatus.LOADING;\n  },\n  error: (state: any, action: PayloadAction) => {\n    state.status.state = SliceStatus.ERROR;\n  },\n  success: (state: any, action: PayloadAction) => {\n    state.status.state = SliceStatus.SUCCESS;\n  },\n};\n\ntype StatusHandler = {\n  initialize: ActionCreatorWithPayload<any, string>;\n  success: ActionCreatorWithPayload<any, string>;\n  error: ActionCreatorWithPayload<any, string>;\n};\n\nexport type WrapReduxAsyncHandlerType = (\n  args?: any\n) => (dispatch: React.Dispatch<any>) => Promise<void>;\n\nexport const wrapReduxAsyncHandler = (\n  statusHandler: StatusHandler,\n  callback: (dispatch: Dispatch<any>, args: any) => Promise<void>\n) => (args?: any) => async (dispatch: Dispatch<any>) => {\n  dispatch(statusHandler.initialize({}));\n\n  callback(dispatch, args)\n    .then(() => {\n      dispatch(statusHandler.success({}));\n    })\n    .catch((err) => {\n      console.error(err);\n    });\n};\n"]},"metadata":{},"sourceType":"module"}