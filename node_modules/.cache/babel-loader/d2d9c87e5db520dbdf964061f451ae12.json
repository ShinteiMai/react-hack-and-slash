{"ast":null,"code":"const numeralCodes = [[\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"], // Ones\n[\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"], // Tens\n[\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"] // Hundreds\n];\nexport const romanize = num => {\n  let numeral = \"\";\n  const digits = num.toString().split(\"\").reverse();\n\n  for (let i = 0; i < digits.length; i++) {\n    numeral = numeralCodes[i][parseInt(digits[i])] + numeral;\n  }\n\n  return numeral;\n};","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/utils/romanize.ts"],"names":["numeralCodes","romanize","num","numeral","digits","toString","split","reverse","i","length","parseInt"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CACnB,CAAC,EAAD,EAAK,GAAL,EAAU,IAAV,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC,KAAxC,EAA+C,MAA/C,EAAuD,IAAvD,CADmB,EAC2C;AAC9D,CAAC,EAAD,EAAK,GAAL,EAAU,IAAV,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC,KAAxC,EAA+C,MAA/C,EAAuD,IAAvD,CAFmB,EAE2C;AAC9D,CAAC,EAAD,EAAK,GAAL,EAAU,IAAV,EAAgB,KAAhB,EAAuB,IAAvB,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC,KAAxC,EAA+C,MAA/C,EAAuD,IAAvD,CAHmB,CAG2C;AAH3C,CAArB;AAMA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAyB;AAC/C,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMC,MAAM,GAAGF,GAAG,CAACG,QAAJ,GAAeC,KAAf,CAAqB,EAArB,EAAyBC,OAAzB,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCL,IAAAA,OAAO,GAAGH,YAAY,CAACQ,CAAD,CAAZ,CAAgBE,QAAQ,CAACN,MAAM,CAACI,CAAD,CAAP,CAAxB,IAAuCL,OAAjD;AACD;;AACD,SAAOA,OAAP;AACD,CAPM","sourcesContent":["const numeralCodes = [\n  [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"], // Ones\n  [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\"], // Tens\n  [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\"], // Hundreds\n];\n\nexport const romanize = (num: number): string => {\n  let numeral = \"\";\n  const digits = num.toString().split(\"\").reverse();\n  for (let i = 0; i < digits.length; i++) {\n    numeral = numeralCodes[i][parseInt(digits[i])] + numeral;\n  }\n  return numeral;\n};\n"]},"metadata":{},"sourceType":"module"}