{"ast":null,"code":"var _jsxFileName = \"/home/shinteimai/workspace/personal/react-pokedex/src/components/InfiniteScroll.tsx\";\nimport React, { useState, useContext, createContext, useEffect, useCallback } from \"react\";\nimport { PAGINATE_SIZE } from \"../features/pokemonSlice\";\nimport LoadButton from \"./LoadButton\";\nimport { Waypoint as ReactWaypoint } from \"react-waypoint\";\nconst InfiniteScrollContext = createContext({\n  page: 0,\n  setPage: () => {},\n  isLoading: true,\n  isFetching: false,\n  paginationHandler: async () => [],\n  paginationUpdater: async () => {}\n});\n\nconst Waypoint = () => {\n  const {\n    isLoading,\n    setPage,\n    page,\n    paginationHandler,\n    paginationUpdater,\n    isFetching\n  } = useContext(InfiniteScrollContext);\n  const [index, setIndex] = useState(0);\n  const [fetchData, setFetchData] = useState([]);\n  const initializeNewPage = useCallback(async () => {\n    if (!isLoading) {\n      setPage(page + PAGINATE_SIZE);\n      const data = await paginationHandler(page);\n      const startingIndex = [...data].reverse().findIndex(d => d !== null);\n      console.log(startingIndex);\n      setIndex(startingIndex === -1 ? 0 : PAGINATE_SIZE - startingIndex);\n      setFetchData(data);\n    }\n  }, [isLoading, page, paginationHandler, setPage]);\n  useEffect(() => {\n    if (isFetching && index < PAGINATE_SIZE) {\n      paginationUpdater(index, PAGINATE_SIZE, fetchData[index]).then(() => setIndex(index + 1));\n    }\n  }, [index, isFetching, fetchData, paginationUpdater]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-48\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReactWaypoint, {\n    onEnter: async () => initializeNewPage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst Button = () => {\n  const {\n    isLoading,\n    setPage,\n    page\n  } = useContext(InfiniteScrollContext);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"py-16 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, isLoading ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadButton, {\n    clickHandler: () => {\n      setPage(page + PAGINATE_SIZE);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst Container = ({\n  children\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-full mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 lg:gap-x-5 gap-y-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nconst InfiniteScroll = ({\n  children,\n  paginationHandler,\n  paginationUpdater,\n  isLoading,\n  isFetching\n}) => {\n  const [page, setPage] = useState(0);\n  return /*#__PURE__*/React.createElement(InfiniteScrollContext.Provider, {\n    value: {\n      page,\n      setPage,\n      isLoading,\n      isFetching,\n      paginationHandler,\n      paginationUpdater\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 5\n    }\n  }, children({\n    mutatePage: setPage\n  }));\n};\n\nInfiniteScroll.Container = Container;\nInfiniteScroll.Button = Button;\nInfiniteScroll.Waypoint = Waypoint;\nexport default InfiniteScroll;","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/components/InfiniteScroll.tsx"],"names":["React","useState","useContext","createContext","useEffect","useCallback","PAGINATE_SIZE","LoadButton","Waypoint","ReactWaypoint","InfiniteScrollContext","page","setPage","isLoading","isFetching","paginationHandler","paginationUpdater","index","setIndex","fetchData","setFetchData","initializeNewPage","data","startingIndex","reverse","findIndex","d","console","log","then","Button","Container","children","InfiniteScroll","mutatePage"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useContext,\n  createContext,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { PAGINATE_SIZE } from \"../features/pokemonSlice\";\nimport LoadButton from \"./LoadButton\";\nimport { Waypoint as ReactWaypoint } from \"react-waypoint\";\nimport { NamedAPIResource } from \"../features/types\";\n\ntype ContextType = {\n  page: number;\n  setPage: React.Dispatch<React.SetStateAction<number>>;\n  isLoading: boolean;\n  isFetching: boolean;\n  paginationHandler: (page: number) => Promise<any[]>;\n  paginationUpdater: (\n    index: number,\n    size: number,\n    data: NamedAPIResource\n  ) => Promise<void>;\n};\nconst InfiniteScrollContext = createContext<ContextType>({\n  page: 0,\n  setPage: () => {},\n  isLoading: true,\n  isFetching: false,\n  paginationHandler: async () => [],\n  paginationUpdater: async () => {},\n});\n\nconst Waypoint = () => {\n  const {\n    isLoading,\n    setPage,\n    page,\n    paginationHandler,\n    paginationUpdater,\n    isFetching,\n  } = useContext(InfiniteScrollContext);\n  const [index, setIndex] = useState<number>(0);\n  const [fetchData, setFetchData] = useState<any[]>([]);\n\n  const initializeNewPage = useCallback(async () => {\n    if (!isLoading) {\n      setPage(page + PAGINATE_SIZE);\n      const data = await paginationHandler(page);\n      const startingIndex = [...data].reverse().findIndex((d) => d !== null);\n      console.log(startingIndex);\n      setIndex(startingIndex === -1 ? 0 : PAGINATE_SIZE - startingIndex);\n      setFetchData(data);\n    }\n  }, [isLoading, page, paginationHandler, setPage]);\n\n  useEffect(() => {\n    if (isFetching && index < PAGINATE_SIZE) {\n      paginationUpdater(index, PAGINATE_SIZE, fetchData[index]).then(() =>\n        setIndex(index + 1)\n      );\n    }\n  }, [index, isFetching, fetchData, paginationUpdater]);\n\n  return (\n    <div className=\"mt-48\">\n      <ReactWaypoint onEnter={async () => initializeNewPage()} />\n    </div>\n  );\n};\n\nconst Button = () => {\n  const { isLoading, setPage, page } = useContext(InfiniteScrollContext);\n  return (\n    <div className=\"py-16 mx-auto\">\n      {isLoading ? null : (\n        <div className=\"mt-6\">\n          <LoadButton\n            clickHandler={() => {\n              setPage(page + PAGINATE_SIZE);\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\ntype ContainerProps = {\n  children: React.ReactNode;\n};\nconst Container = ({ children }: ContainerProps) => {\n  return (\n    <div className=\"w-full mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 lg:gap-x-5 gap-y-6\">\n      {children}\n    </div>\n  );\n};\n\ntype InfiniteScrollProps = {\n  children: ({\n    mutatePage: resetPage,\n  }: {\n    mutatePage: React.Dispatch<React.SetStateAction<number>>;\n  }) => React.ReactNode;\n  paginationHandler: (page: number) => Promise<any[]>;\n  paginationUpdater: (\n    index: number,\n    size: number,\n    data: NamedAPIResource\n  ) => Promise<void>;\n  isLoading: boolean;\n  isFetching: boolean;\n};\n\nconst InfiniteScroll = ({\n  children,\n  paginationHandler,\n  paginationUpdater,\n  isLoading,\n  isFetching,\n}: InfiniteScrollProps) => {\n  const [page, setPage] = useState(0);\n\n  return (\n    <InfiniteScrollContext.Provider\n      value={{\n        page,\n        setPage,\n        isLoading,\n        isFetching,\n        paginationHandler,\n        paginationUpdater,\n      }}\n    >\n      {children({ mutatePage: setPage })}\n    </InfiniteScrollContext.Provider>\n  );\n};\n\nInfiniteScroll.Container = Container;\nInfiniteScroll.Button = Button;\nInfiniteScroll.Waypoint = Waypoint;\nexport default InfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}