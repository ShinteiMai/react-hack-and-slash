{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport fromApi from \"../api/fromApi\";\nimport { SliceStatus } from \"../globals\";\nimport { camelcaseObject } from \"../utils/camelcaseObject\";\nimport { statusHandlerReducer, wrapReduxAsyncHandler } from \"./utilities\";\nconst initialState = {\n  data: [],\n  status: {\n    state: SliceStatus.IDLE\n  }\n};\nconst evolutionChainSlice = createSlice({\n  name: \"evolutionChains\",\n  initialState,\n  reducers: { ...statusHandlerReducer,\n\n    getEvolutionChainReducer(state, action) {\n      const {\n        evolutionChain\n      } = action.payload;\n      const isExist = state.data.find(e => e.id === evolutionChain.id);\n\n      if (!isExist) {\n        state.data.push(evolutionChain);\n      }\n    }\n\n  }\n});\nexport const {\n  initialize,\n  error,\n  success,\n  getEvolutionChainReducer\n} = evolutionChainSlice.actions;\nexport const statusHandler = {\n  initialize,\n  error,\n  success\n};\nexport const evolutionChainSelector = state => state.evolutionChain;\nexport const evolutionChainReducer = evolutionChainSlice.reducer;\nexport const getEvolutionChainByName = wrapReduxAsyncHandler(statusHandler, async (dispatch, {\n  name\n}) => {\n  const result = await fromApi.getEvolutionChainByNameOrId(name);\n  dispatch(getEvolutionChainReducer({\n    evolutionChain: camelcaseObject(result)\n  }));\n});\nexport const getEvolutionChainById = wrapReduxAsyncHandler(statusHandler, async (dispatch, {\n  id\n}) => {\n  const result = await fromApi.getEvolutionChainByNameOrId(Number(id));\n  dispatch(getEvolutionChainReducer({\n    evolutionChain: camelcaseObject(result)\n  }));\n});","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/features/evolutionChainSlice.ts"],"names":["createSlice","fromApi","SliceStatus","camelcaseObject","statusHandlerReducer","wrapReduxAsyncHandler","initialState","data","status","state","IDLE","evolutionChainSlice","name","reducers","getEvolutionChainReducer","action","evolutionChain","payload","isExist","find","e","id","push","initialize","error","success","actions","statusHandler","evolutionChainSelector","evolutionChainReducer","reducer","getEvolutionChainByName","dispatch","result","getEvolutionChainByNameOrId","getEvolutionChainById","Number"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AAGA,SAASC,oBAAT,EAA+BC,qBAA/B,QAA4D,aAA5D;AAyCA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,IAAI,EAAE,EADyB;AAE/BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,KAAK,EAAEP,WAAW,CAACQ;AADb;AAFuB,CAAjC;AAOA,MAAMC,mBAAmB,GAAGX,WAAW,CAAC;AACtCY,EAAAA,IAAI,EAAE,iBADgC;AAEtCN,EAAAA,YAFsC;AAGtCO,EAAAA,QAAQ,EAAE,EACR,GAAGT,oBADK;;AAERU,IAAAA,wBAAwB,CACtBL,KADsB,EAEtBM,MAFsB,EAGtB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAqBD,MAAM,CAACE,OAAlC;AACA,YAAMC,OAAO,GAAGT,KAAK,CAACF,IAAN,CAAWY,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASL,cAAc,CAACK,EAA/C,CAAhB;;AACA,UAAI,CAACH,OAAL,EAAc;AACZT,QAAAA,KAAK,CAACF,IAAN,CAAWe,IAAX,CAAgBN,cAAhB;AACD;AACF;;AAXO;AAH4B,CAAD,CAAvC;AAkBA,OAAO,MAAM;AACXO,EAAAA,UADW;AAEXC,EAAAA,KAFW;AAGXC,EAAAA,OAHW;AAIXX,EAAAA;AAJW,IAKTH,mBAAmB,CAACe,OALjB;AAMP,OAAO,MAAMC,aAAa,GAAG;AAAEJ,EAAAA,UAAF;AAAcC,EAAAA,KAAd;AAAqBC,EAAAA;AAArB,CAAtB;AAEP,OAAO,MAAMG,sBAAsB,GAAInB,KAAD,IACpCA,KAAK,CAACO,cADD;AAEP,OAAO,MAAMa,qBAAqB,GAAGlB,mBAAmB,CAACmB,OAAlD;AAEP,OAAO,MAAMC,uBAAuB,GAAG1B,qBAAqB,CAC1DsB,aAD0D,EAE1D,OAAOK,QAAP,EAAiB;AAAEpB,EAAAA;AAAF,CAAjB,KAA8B;AAC5B,QAAMqB,MAAM,GAAG,MAAMhC,OAAO,CAACiC,2BAAR,CAAoCtB,IAApC,CAArB;AACAoB,EAAAA,QAAQ,CACNlB,wBAAwB,CAAC;AAAEE,IAAAA,cAAc,EAAEb,eAAe,CAAC8B,MAAD;AAAjC,GAAD,CADlB,CAAR;AAGD,CAPyD,CAArD;AASP,OAAO,MAAME,qBAAqB,GAAG9B,qBAAqB,CACxDsB,aADwD,EAExD,OAAOK,QAAP,EAAiB;AAAEX,EAAAA;AAAF,CAAjB,KAA4B;AAC1B,QAAMY,MAAM,GAAG,MAAMhC,OAAO,CAACiC,2BAAR,CAAoCE,MAAM,CAACf,EAAD,CAA1C,CAArB;AACAW,EAAAA,QAAQ,CACNlB,wBAAwB,CAAC;AAAEE,IAAAA,cAAc,EAAEb,eAAe,CAAC8B,MAAD;AAAjC,GAAD,CADlB,CAAR;AAGD,CAPuD,CAAnD","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport fromApi from \"../api/fromApi\";\nimport { SliceStatus } from \"../globals\";\nimport { camelcaseObject } from \"../utils/camelcaseObject\";\nimport { RootState } from \"./store\";\nimport { NamedAPIResource } from \"./types\";\nimport { statusHandlerReducer, wrapReduxAsyncHandler } from \"./utilities\";\n\nexport type ChainLink = {\n  isBaby: boolean;\n  species: NamedAPIResource;\n  evolutionDetails: {\n    item: NamedAPIResource;\n    trigger: NamedAPIResource;\n    gender: number;\n    heldItem: NamedAPIResource;\n    knownMove: NamedAPIResource;\n    knownMoveType: NamedAPIResource;\n    location: NamedAPIResource;\n    minLevel: NamedAPIResource;\n    minHappiness: NamedAPIResource;\n    minBeauty: NamedAPIResource;\n    minAffection: NamedAPIResource;\n    needsOverworldRain: boolean;\n    partySpecies: NamedAPIResource;\n    partyType: NamedAPIResource;\n    relativePhysicalStats: number;\n    timeOfDay: string;\n    tradeSpecies: NamedAPIResource;\n    turnUpsideDown: boolean;\n  };\n  evolvesTo: ChainLink;\n};\n\nexport type EvolutionChain = {\n  id: number;\n  babyTriggerItem: NamedAPIResource;\n  chain: ChainLink;\n};\n\ntype SliceState = {\n  data: EvolutionChain[];\n  status: {\n    state: SliceStatus;\n  };\n};\n\nconst initialState: SliceState = {\n  data: [],\n  status: {\n    state: SliceStatus.IDLE,\n  },\n};\n\nconst evolutionChainSlice = createSlice({\n  name: \"evolutionChains\",\n  initialState,\n  reducers: {\n    ...statusHandlerReducer,\n    getEvolutionChainReducer(\n      state,\n      action: PayloadAction<{ evolutionChain: EvolutionChain }>\n    ) {\n      const { evolutionChain } = action.payload;\n      const isExist = state.data.find((e) => e.id === evolutionChain.id);\n      if (!isExist) {\n        state.data.push(evolutionChain);\n      }\n    },\n  },\n});\n\nexport const {\n  initialize,\n  error,\n  success,\n  getEvolutionChainReducer,\n} = evolutionChainSlice.actions;\nexport const statusHandler = { initialize, error, success };\n\nexport const evolutionChainSelector = (state: RootState) =>\n  state.evolutionChain;\nexport const evolutionChainReducer = evolutionChainSlice.reducer;\n\nexport const getEvolutionChainByName = wrapReduxAsyncHandler(\n  statusHandler,\n  async (dispatch, { name }) => {\n    const result = await fromApi.getEvolutionChainByNameOrId(name);\n    dispatch(\n      getEvolutionChainReducer({ evolutionChain: camelcaseObject(result) })\n    );\n  }\n);\nexport const getEvolutionChainById = wrapReduxAsyncHandler(\n  statusHandler,\n  async (dispatch, { id }) => {\n    const result = await fromApi.getEvolutionChainByNameOrId(Number(id));\n    dispatch(\n      getEvolutionChainReducer({ evolutionChain: camelcaseObject(result) })\n    );\n  }\n);\n"]},"metadata":{},"sourceType":"module"}