{"ast":null,"code":"import _slicedToArray from\"/home/shinteimai/workspace/personal/react-pokedex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";var SCROLL_UP=\"up\";var SCROLL_DOWN=\"down\";var useScrollDirection=function useScrollDirection(){var _ref=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{},initialDirection=_ref.initialDirection,thresholdPixels=_ref.thresholdPixels,off=_ref.off;var _useState=useState(initialDirection),_useState2=_slicedToArray(_useState,2),scrollDir=_useState2[0],setScrollDir=_useState2[1];useEffect(function(){var threshold=thresholdPixels||0;var lastScrollY=window.pageYOffset;var ticking=false;var updateScrollDir=function updateScrollDir(){var scrollY=window.pageYOffset;if(Math.abs(scrollY-lastScrollY)<threshold){// We haven't exceeded the threshold\nticking=false;return;}setScrollDir(scrollY>lastScrollY?SCROLL_DOWN:SCROLL_UP);lastScrollY=scrollY>0?scrollY:0;ticking=false;};var onScroll=function onScroll(){if(!ticking){window.requestAnimationFrame(updateScrollDir);ticking=true;}};/**\n     * Bind the scroll handler if `off` is set to false.\n     * If `off` is set to true reset the scroll direction.\n     */!off?window.addEventListener(\"scroll\",onScroll):setScrollDir(initialDirection);return function(){return window.removeEventListener(\"scroll\",onScroll);};},[initialDirection,thresholdPixels,off]);return scrollDir;};export default useScrollDirection;","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/hooks/useScrollDirection.ts"],"names":["useState","useEffect","SCROLL_UP","SCROLL_DOWN","useScrollDirection","initialDirection","thresholdPixels","off","scrollDir","setScrollDir","threshold","lastScrollY","window","pageYOffset","ticking","updateScrollDir","scrollY","Math","abs","onScroll","requestAnimationFrame","addEventListener","removeEventListener"],"mappings":"wKAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,SAAS,CAAG,IAAlB,CACA,GAAMC,CAAAA,WAAW,CAAG,MAApB,CAUA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAIT,oEAAP,EAAO,CAHhBC,gBAGgB,MAHhBA,gBAGgB,CAFhBC,eAEgB,MAFhBA,eAEgB,CADhBC,GACgB,MADhBA,GACgB,eACkBP,QAAQ,CAACK,gBAAD,CAD1B,wCACTG,SADS,eACEC,YADF,eAGhBR,SAAS,CAAC,UAAM,CACd,GAAMS,CAAAA,SAAS,CAAGJ,eAAe,EAAI,CAArC,CACA,GAAIK,CAAAA,WAAW,CAAGC,MAAM,CAACC,WAAzB,CACA,GAAIC,CAAAA,OAAO,CAAG,KAAd,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B,GAAMC,CAAAA,OAAO,CAAGJ,MAAM,CAACC,WAAvB,CAEA,GAAII,IAAI,CAACC,GAAL,CAASF,OAAO,CAAGL,WAAnB,EAAkCD,SAAtC,CAAiD,CAC/C;AACAI,OAAO,CAAG,KAAV,CACA,OACD,CAEDL,YAAY,CAACO,OAAO,CAAGL,WAAV,CAAwBR,WAAxB,CAAsCD,SAAvC,CAAZ,CACAS,WAAW,CAAGK,OAAO,CAAG,CAAV,CAAcA,OAAd,CAAwB,CAAtC,CACAF,OAAO,CAAG,KAAV,CACD,CAZD,CAcA,GAAMK,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAI,CAACL,OAAL,CAAc,CACZF,MAAM,CAACQ,qBAAP,CAA6BL,eAA7B,EACAD,OAAO,CAAG,IAAV,CACD,CACF,CALD,CAOA;;;OAIA,CAACP,GAAD,CACIK,MAAM,CAACS,gBAAP,CAAwB,QAAxB,CAAkCF,QAAlC,CADJ,CAEIV,YAAY,CAACJ,gBAAD,CAFhB,CAIA,MAAO,kBAAMO,CAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,CAAqCH,QAArC,CAAN,EAAP,CACD,CAnCQ,CAmCN,CAACd,gBAAD,CAAmBC,eAAnB,CAAoCC,GAApC,CAnCM,CAAT,CAqCA,MAAOC,CAAAA,SAAP,CACD,CA7CD,CA+CA,cAAeJ,CAAAA,kBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst SCROLL_UP = \"up\";\nconst SCROLL_DOWN = \"down\";\n\ntype Directions = \"up\" | \"down\";\n\ntype Props = {\n  initialDirection?: Directions;\n  thresholdPixels?: number;\n  off?: boolean;\n};\n\nconst useScrollDirection = ({\n  initialDirection,\n  thresholdPixels,\n  off,\n}: Props = {}) => {\n  const [scrollDir, setScrollDir] = useState(initialDirection);\n\n  useEffect(() => {\n    const threshold = thresholdPixels || 0;\n    let lastScrollY = window.pageYOffset;\n    let ticking = false;\n\n    const updateScrollDir = () => {\n      const scrollY = window.pageYOffset;\n\n      if (Math.abs(scrollY - lastScrollY) < threshold) {\n        // We haven't exceeded the threshold\n        ticking = false;\n        return;\n      }\n\n      setScrollDir(scrollY > lastScrollY ? SCROLL_DOWN : SCROLL_UP);\n      lastScrollY = scrollY > 0 ? scrollY : 0;\n      ticking = false;\n    };\n\n    const onScroll = () => {\n      if (!ticking) {\n        window.requestAnimationFrame(updateScrollDir);\n        ticking = true;\n      }\n    };\n\n    /**\n     * Bind the scroll handler if `off` is set to false.\n     * If `off` is set to true reset the scroll direction.\n     */\n    !off\n      ? window.addEventListener(\"scroll\", onScroll)\n      : setScrollDir(initialDirection);\n\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [initialDirection, thresholdPixels, off]);\n\n  return scrollDir;\n};\n\nexport default useScrollDirection;\n"]},"metadata":{},"sourceType":"module"}