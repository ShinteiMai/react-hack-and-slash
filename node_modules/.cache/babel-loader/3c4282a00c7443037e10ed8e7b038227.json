{"ast":null,"code":"var _jsxFileName = \"/home/shinteimai/workspace/personal/react-pokedex/src/components/InfiniteScroll.tsx\";\nimport React, { useState, useContext, createContext } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getPokemons, PAGINATE_SIZE } from \"../features/pokemonSlice\";\nimport LoadButton from \"./LoadButton\";\nimport { Waypoint as ReactWaypoint } from \"react-waypoint\";\nconst InfiniteScrollContext = createContext({\n  page: 0,\n  setPage: () => {},\n  isLoading: true,\n  paginationHandler: getPokemons\n});\n\nconst Waypoint = () => {\n  const {\n    isLoading,\n    setPage,\n    page,\n    paginationHandler\n  } = useContext(InfiniteScrollContext);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-48\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReactWaypoint, {\n    onEnter: () => {\n      if (!isLoading) {\n        setPage(page + PAGINATE_SIZE);\n        dispatch(paginationHandler(page));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst Button = () => {\n  const {\n    isLoading,\n    setPage,\n    page\n  } = useContext(InfiniteScrollContext);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"py-16 mx-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, isLoading ? null : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LoadButton, {\n    clickHandler: () => {\n      setPage(page + PAGINATE_SIZE);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  })));\n};\n\nconst Container = ({\n  children\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-full mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 lg:gap-x-5 gap-y-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nconst InfiniteScroll = ({\n  children,\n  paginationHandler,\n  isLoading\n}) => {\n  const [page, setPage] = useState(0);\n  return /*#__PURE__*/React.createElement(InfiniteScrollContext.Provider, {\n    value: {\n      page,\n      setPage,\n      isLoading,\n      paginationHandler\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, children({\n    mutatePage: setPage\n  }));\n};\n\nInfiniteScroll.Container = Container;\nInfiniteScroll.Button = Button;\nInfiniteScroll.Waypoint = Waypoint;\nexport default InfiniteScroll;","map":{"version":3,"sources":["/home/shinteimai/workspace/personal/react-pokedex/src/components/InfiniteScroll.tsx"],"names":["React","useState","useContext","createContext","useDispatch","getPokemons","PAGINATE_SIZE","LoadButton","Waypoint","ReactWaypoint","InfiniteScrollContext","page","setPage","isLoading","paginationHandler","dispatch","Button","Container","children","InfiniteScroll","mutatePage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,aAAtC,QAA2D,OAA3D;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,aAAtB,QAA2C,0BAA3C;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,SAASC,QAAQ,IAAIC,aAArB,QAA0C,gBAA1C;AAUA,MAAMC,qBAAqB,GAAGP,aAAa,CAAc;AACvDQ,EAAAA,IAAI,EAAE,CADiD;AAEvDC,EAAAA,OAAO,EAAE,MAAM,CAAE,CAFsC;AAGvDC,EAAAA,SAAS,EAAE,IAH4C;AAIvDC,EAAAA,iBAAiB,EAAET;AAJoC,CAAd,CAA3C;;AAOA,MAAMG,QAAQ,GAAG,MAAM;AACrB,QAAM;AAAEK,IAAAA,SAAF;AAAaD,IAAAA,OAAb;AAAsBD,IAAAA,IAAtB;AAA4BG,IAAAA;AAA5B,MAAkDZ,UAAU,CAChEQ,qBADgE,CAAlE;AAGA,QAAMK,QAAQ,GAAGX,WAAW,EAA5B;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACb,UAAI,CAACS,SAAL,EAAgB;AACdD,QAAAA,OAAO,CAACD,IAAI,GAAGL,aAAR,CAAP;AACAS,QAAAA,QAAQ,CAACD,iBAAiB,CAACH,IAAD,CAAlB,CAAR;AACD;AACF,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAYD,CAjBD;;AAmBA,MAAMK,MAAM,GAAG,MAAM;AACnB,QAAM;AAAEH,IAAAA,SAAF;AAAaD,IAAAA,OAAb;AAAsBD,IAAAA;AAAtB,MAA+BT,UAAU,CAACQ,qBAAD,CAA/C;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,SAAS,GAAG,IAAH,gBACR;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,YAAY,EAAE,MAAM;AAClBD,MAAAA,OAAO,CAACD,IAAI,GAAGL,aAAR,CAAP;AACD,KAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CADF;AAaD,CAfD;;AAoBA,MAAMW,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkC;AAClD,sBACE;AAAK,IAAA,SAAS,EAAC,0FAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,QADH,CADF;AAKD,CAND;;AAoBA,MAAMC,cAAc,GAAG,CAAC;AACtBD,EAAAA,QADsB;AAEtBJ,EAAAA,iBAFsB;AAGtBD,EAAAA;AAHsB,CAAD,KAII;AACzB,QAAM,CAACF,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,CAAD,CAAhC;AAEA,sBACE,oBAAC,qBAAD,CAAuB,QAAvB;AACE,IAAA,KAAK,EAAE;AACLU,MAAAA,IADK;AAELC,MAAAA,OAFK;AAILC,MAAAA,SAJK;AAKLC,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGI,QAAQ,CAAC;AAAEE,IAAAA,UAAU,EAAER;AAAd,GAAD,CATX,CADF;AAaD,CApBD;;AAsBAO,cAAc,CAACF,SAAf,GAA2BA,SAA3B;AACAE,cAAc,CAACH,MAAf,GAAwBA,MAAxB;AACAG,cAAc,CAACX,QAAf,GAA0BA,QAA1B;AACA,eAAeW,cAAf","sourcesContent":["import React, { useState, useContext, createContext } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { getPokemons, PAGINATE_SIZE } from \"../features/pokemonSlice\";\nimport { PokemonGenerationsEnum } from \"../features/cachedPokemonsSlice\";\nimport LoadButton from \"./LoadButton\";\nimport { randomize } from \"../utils/randomize\";\nimport { Waypoint as ReactWaypoint } from \"react-waypoint\";\n\ntype ContextType = {\n  page: number;\n  setPage: React.Dispatch<React.SetStateAction<number>>;\n  isLoading: boolean;\n  paginationHandler: (\n    page: number\n  ) => (dispatch: React.Dispatch<any>) => Promise<void>;\n};\nconst InfiniteScrollContext = createContext<ContextType>({\n  page: 0,\n  setPage: () => {},\n  isLoading: true,\n  paginationHandler: getPokemons,\n});\n\nconst Waypoint = () => {\n  const { isLoading, setPage, page, paginationHandler } = useContext(\n    InfiniteScrollContext\n  );\n  const dispatch = useDispatch();\n  return (\n    <div className=\"mt-48\">\n      <ReactWaypoint\n        onEnter={() => {\n          if (!isLoading) {\n            setPage(page + PAGINATE_SIZE);\n            dispatch(paginationHandler(page));\n          }\n        }}\n      />\n    </div>\n  );\n};\n\nconst Button = () => {\n  const { isLoading, setPage, page } = useContext(InfiniteScrollContext);\n  return (\n    <div className=\"py-16 mx-auto\">\n      {isLoading ? null : (\n        <div className=\"mt-6\">\n          <LoadButton\n            clickHandler={() => {\n              setPage(page + PAGINATE_SIZE);\n            }}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\ntype ContainerProps = {\n  children: React.ReactNode;\n};\nconst Container = ({ children }: ContainerProps) => {\n  return (\n    <div className=\"w-full mx-auto grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8 lg:gap-x-5 gap-y-6\">\n      {children}\n    </div>\n  );\n};\n\ntype InfiniteScrollProps = {\n  children: ({\n    mutatePage: resetPage,\n  }: {\n    mutatePage: React.Dispatch<React.SetStateAction<number>>;\n  }) => React.ReactNode;\n  paginationHandler: (\n    page: number\n  ) => (dispatch: React.Dispatch<any>) => Promise<void>;\n  isLoading: boolean;\n};\n\nconst InfiniteScroll = ({\n  children,\n  paginationHandler,\n  isLoading,\n}: InfiniteScrollProps) => {\n  const [page, setPage] = useState(0);\n\n  return (\n    <InfiniteScrollContext.Provider\n      value={{\n        page,\n        setPage,\n\n        isLoading,\n        paginationHandler,\n      }}\n    >\n      {children({ mutatePage: setPage })}\n    </InfiniteScrollContext.Provider>\n  );\n};\n\nInfiniteScroll.Container = Container;\nInfiniteScroll.Button = Button;\nInfiniteScroll.Waypoint = Waypoint;\nexport default InfiniteScroll;\n"]},"metadata":{},"sourceType":"module"}